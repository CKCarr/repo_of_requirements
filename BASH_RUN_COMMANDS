BASH RUN COMMANDS
cheatsheet

Personalize Bash shell 
and set
ALIASES for environments
make sure to run source  on the ~./bashrc and if still not working try restarting terminal before troubleshooting further
============================================================================
To change the current directory to your home directory when a new interactive shell session is started.
set ~ as your cwd in bashrc

vim ~/.bashrc
(add the command cd ~ to file ,I just add all my personal setting to bottom of file to find easier)

cd ~
(After saving and Exiting file
run the following on the command line to update the environment to your new specifications)

source ~/.bashrc
==============================================================================
Python3 alias

create an alias to avoid typing python3 each time you want to run a Python script. 

vim ~/.bashrc

alias py='python3'

source ~/.bashrc

===============================================================================
Pycodestyle alias

get apt-install pycodestyle

vim ~/.bashrc
alias pycs="pycodestyle"
source ~/.bashrc
===============================================
For Github  add commit push - alias

i made a directory called scripts/
for bash scripts and save this in that folder

create bash file for git commit add push
(my example)
filename and script
gacp.sh 
============================================
#!/bin/bash

# Prompt for the commit message
read -p "Enter commit message: " commit_message

# Add all changes to the staging area
git add .

# Show the commit message
echo "Commit Message: $commit_message"

# Confirm the commit
read -p "Press enter to confirm the commit or Ctrl+C to cancel"

# Commit changes with the provided commit message
git commit -m "$commit_message"

# Push changes to the specified branch
git push
=====================================================

add alias for this github add commit push script
 
vim ~/.bashrc
alias gacp="bash ~/scripts/gacp.sh"
source ~/.bashrc

------------------------------------------------------------------------------------------------------------------------
for w3c_validator
clone repo to root folder

git clone https://github.com/holbertonschool/W3C-Validator.git

add alias
-----------
step 1.  update file
vim ~/.bashrc
step 2. (add to bottom)
alias w3c='python3 ~/W3C-Validator/w3c_validator.py'
step 3. run on command line to update
source ~/.bashrc
========================================================================================================================

For Node.js, Jest, Babel, ESlint -- versions may be outdated- check requirements:)
------------------------------------------------------------------------------------------
<<<<<<<<<<<<<<<<<<<<<<<<<<<<INFORMATION>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
1. Jest:
Jest is a popular JavaScript testing framework often used for unit testing and integration testing in JavaScript
projects. It provides a robust and easy-to-use testing environment, including features like test runners, assertion
libraries, and mocking capabilities. 
By installing Jest as a development dependency, you can write and run tests for your JavaScript code.

2. Babel:
Babel is a JavaScript compiler that allows you to write modern JavaScript code (ES6+ and beyond)
and then transpile it into older versions of JavaScript (typically ES5) that can run in older browsers or environments.
In the context of Jest, you're installing babel-jest, which is a Jest plugin that integrates Babel with Jest.
It enables Jest to understand and process modern JavaScript syntax during testing.
        @babel/core: The core package of Babel.
        @babel/preset-env: A Babel preset that allows you to target specific JavaScript environments,
        so you can transpile your code to match the capabilities of your target runtime environment.

3. ESLint:
ESLint is a static code analysis tool for identifying and fixing problems in JavaScript code. It helps enforce coding
standards, detect potential bugs, and ensure code consistency across your project. By installing ESLint as a
development dependency, you can configure and run linting checks on your JavaScript code to maintain code quality and
style.

These tools are commonly used in JavaScript development to ensure code quality, maintainability, and reliability.
Jest is for testing your code,
Babel is for transpiling modern JavaScript,
and ESLint is for code linting and style checking.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<INFO END>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

**********************************
Step 1: Install Node.js 12.11.x
**********************************
In your home directory, open a terminal and run the following commands:

```
curl -sL https://deb.nodesource.com/setup_12.x -o nodesource_setup.sh
sudo bash nodesource_setup.sh
sudo apt install nodejs -y
```
Verify the Node.js and npm versions:

```
nodejs -v
npm -v
```
***************************************
Step 2: Set up your project directory
***************************************
Navigate to your project directory using the terminal.


****************************************
Step 3: Install Jest, Babel, and ESLint
****************************************
Run the following commands to install Jest, Babel, and ESLint as dev dependencies:
```
npm install --save-dev jest
npm install --save-dev babel-jest @babel/core @babel/preset-env
npm install --save-dev eslint

```

*****************************************
Step 4: Create Configuration Files
*****************************************
You should create these configuration files in your project directory.

<<--  package.json: -->>
You may already have this file. It's used to manage your project's dependencies.
If it's not there, you can create one using ``npm init`` and follow the prompts. -->>

```
{
  "scripts": {
    "lint": "./node_modules/.bin/eslint",
    "check-lint": "lint [0-9]*.js",
    "dev": "npx babel-node",
    "test": "jest",
    "full-test": "./node_modules/.bin/eslint [0-9]*.js && jest"
  },
  "devDependencies": {
    "@babel/core": "^7.6.0",
    "@babel/node": "^7.8.0",
    "@babel/preset-env": "^7.6.0",
    "eslint": "^6.4.0",
    "eslint-config-airbnb-base": "^14.0.0",
    "eslint-plugin-import": "^2.18.2",
    "eslint-plugin-jest": "^22.17.0",
    "jest": "^24.9.0"
  }
}
```

<<-- BABEL: babel.config.js -->>
file in your project directory if it doesn't exist and configure it according to your project's requirements. -->>

```
module.exports = {
  presets: [
    [
      '@babel/preset-env',
      {
        targets: {
          node: 'current',
        },
      },
    ],
  ],
};
```

<<--  ESLINT: .eslintrc.js -->
 file in your project directory if it doesn't exist and configure it according to your project's ESLint rules. -->>

```
module.exports = {
  env: {
    browser: false,
    es6: true,
    jest: true,
  },
  extends: [
    'airbnb-base',
    'plugin:jest/all',
  ],
  globals: {
    Atomics: 'readonly',
    SharedArrayBuffer: 'readonly',
  },
  parserOptions: {
    ecmaVersion: 2018,
    sourceType: 'module',
  },
  plugins: ['jest'],
  rules: {
    'no-console': 'off',
    'no-shadow': 'off',
    'no-restricted-syntax': [
      'error',
      'LabeledStatement',
      'WithStatement',
    ],
  },
  overrides:[
    {
      files: ['*.js'],
      excludedFiles: 'babel.config.js',
    }
  ]
};
```

*******************************************
Step 5: Install Project Dependencies
*******************************************
Run the following command in your project directory to install all necessary project dependencies based on the package.json file:

```
npm install

```
========================================================================================================================

How to use ESLINT -->> basics <<------------

********************************************
1. Create or Lint Your JavaScript Files:
********************************************
Now, you can use ESLint to lint your JavaScript files.

For example, to lint a specific file, run:
````````````````````````
npx eslint your-file.js
````````````````````````
Or, to lint all JavaScript files in a directory:
`````````````````````
npx eslint .
`````````````````````
ESLint will provide feedback on any issues or errors it finds in your code based on the rules you've configured.

***********************************************
2. Fixing Issues:
***********************************************
To automatically fix some of the ESLint errors, you can run:
````````````````````````````````````````
npx eslint --fix your-file.js
````````````````````````````````````````
This command will attempt to automatically fix some of the issues according to your ESLint configuration.
